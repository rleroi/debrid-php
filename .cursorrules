# Debrid Library - Cursor Rules

## Project Overview
This is a PHP library for interacting with debrid services (Real-Debrid, Premiumize, TorBox) to download and stream torrent content. The library provides a unified interface for different debrid providers.

## Architecture

### Core Components
- `src/Client.php` - Main client class that acts as a facade
- `src/Clients/ClientStrategy.php` - Interface that all debrid clients must implement
- `src/Clients/RealDebridClient.php` - Real-Debrid implementation
- `src/Clients/AllDebridClient.php` - AllDebrid implementation
- `src/Clients/PremiumizeClient.php` - Premiumize implementation  
- `src/Clients/TorBoxClient.php` - TorBox implementation
- `src/Exceptions/DebridException.php` - Custom exception class

### Key Design Principles
1. **Interface-Driven Development**: All clients must implement `ClientStrategy` interface
2. **Unified API**: Same methods work across different debrid providers
3. **Error Handling**: Consistent exception handling with `DebridException`
4. **HTTP Client**: Uses GuzzleHttp for API requests
5. **Unit Testing**: Comprehensive PHPUnit tests with Mockery for mocking

## ClientStrategy Interface Requirements

All debrid clients MUST implement these public methods:

```php
interface ClientStrategy
{
    public function setToken(string $token): void;
    public function getCachedFiles(string $magnet): array;
    public function isFileCached(string $magnet, string $path): bool;
    public function getLink(string $magnet, string $path): string;
    public function addMagnet(string $magnet): string;
}
```

### Method Specifications

#### `setToken(string $token): void`
- Sets the API token for the debrid service
- Must be called before any other operations
- Throws `InvalidArgumentException` if token is empty/null

#### `getCachedFiles(string $magnet): array`
- Returns array of file paths available in the torrent
- Should add magnet if not already added
- Returns empty array if no files found
- Throws `DebridException` if torrent not ready

#### `isFileCached(string $magnet, string $path): bool`
- Checks if specific file exists in torrent
- Returns `true` if file exists, `false` otherwise
- Uses `getCachedFiles()` internally

#### `getLink(string $magnet, string $path): string`
- Returns unrestricted download link for specific file
- Must use `$path` parameter to select correct file
- Should return final streaming/download URL (not restricted link)
- Throws `DebridException` if file not found or torrent not ready

#### `addMagnet(string $magnet): string`
- Adds magnet to debrid service
- Returns torrent ID
- Should check for existing torrents to prevent duplicates
- Throws `DebridException` if addition fails

## Real-Debrid Implementation Details

### API Endpoints Used
- `POST torrents/addMagnet` - Add magnet link
- `GET torrents` - Get list of all torrents
- `GET torrents/info/{id}` - Get torrent information
- `POST torrents/selectFiles/{id}` - Select specific files
- `POST unrestrict/link` - Get unrestricted download link

### Key Implementation Features
1. **Duplicate Prevention**: Checks existing torrents by hash before adding
2. **Hash Extraction**: Extracts torrent hash from magnet links using regex
3. **File Selection**: Uses `$path` parameter to select specific files
4. **Unrestriction**: Converts restricted links to unrestricted download URLs
5. **Status Handling**: Accepts both `downloaded` and `waiting_files_selection` as ready states

### Real-Debrid Workflow
1. Extract hash from magnet link
2. Check if torrent already exists in account
3. Add magnet if not found (returns torrent ID)
4. Get torrent info to map file paths to IDs
5. Find target file ID based on `$path` parameter
6. Select specific file using `torrents/selectFiles`
7. Get updated torrent info to retrieve restricted links
8. Unrestrict link using `unrestrict/link` endpoint
9. Return final unrestricted download URL

### Error Handling
- Invalid magnet links throw `DebridException`
- Missing tokens throw `InvalidArgumentException`
- API errors throw `DebridException` with error message
- JSON parsing errors throw `JsonException`
- HTTP errors throw `DebridException`

## AllDebrid Implementation Details

### API Endpoints Used
- `POST magnet/upload` - Upload magnet link
- `GET magnet/status` - Get magnet status and list all magnets
- `GET magnet/links` - Get files and download links for a magnet

### Key Implementation Features
1. **Duplicate Prevention**: Checks existing magnets by hash before uploading
2. **Hash Extraction**: Extracts torrent hash from magnet links using regex
3. **File Selection**: Uses `$path` parameter to select specific files
4. **Direct Links**: Returns direct download links (no unrestriction needed)
5. **Status Handling**: Accepts `Ready` status as ready state

### AllDebrid Workflow
1. Extract hash from magnet link
2. Check if magnet already exists in account
3. Upload magnet if not found (returns magnet ID)
4. Get magnet status to check if ready
5. Get files and links using `magnet/links`
6. Find target file based on `$path` parameter
7. Return direct download link

### Error Handling
- Invalid magnet links throw `DebridException`
- Missing tokens throw `InvalidArgumentException`
- API errors throw `DebridException` with error code and message
- JSON parsing errors throw `JsonException`
- HTTP errors throw `DebridException`

## TorBox Implementation Details

### API Endpoints Used
- `GET torrents/checkcached` - Check if torrent is cached
- `POST torrents/createtorrent` - Add magnet link
- `GET torrents/info/{id}` - Get torrent information
- `POST torrents/download` - Get download link for file

### Key Implementation Features
1. **Cache Checking**: Uses `torrents/checkcached` endpoint for proper cache validation
2. **Hash Extraction**: Extracts torrent hash from magnet links using regex
3. **File Selection**: Uses `$path` parameter to select specific files
4. **Direct Links**: Returns direct download links (no unrestriction needed)
5. **Status Handling**: Accepts both `downloaded` and `ready` as ready states

### TorBox Workflow
1. Extract hash from magnet link
2. Check if torrent is cached using `torrents/checkcached`
3. If cached: Return files directly from cache
4. If not cached: User must manually call `addMagnet()` first
5. Get download links using `torrents/download` endpoint

### Error Handling
- Invalid magnet links throw `DebridException`
- Missing tokens throw `InvalidArgumentException`
- API errors throw `DebridException` with `detail` message
- JSON parsing errors throw `JsonException`
- HTTP errors throw `DebridException`

### TorBox Mock Requirements
- Mock `GET torrents/checkcached` for cache checking
- Mock `POST torrents/createtorrent` for adding magnets
- Mock `GET torrents/info/{id}` for torrent information
- Mock `POST torrents/download` for getting download links

## DebridLink Implementation Details

### API Endpoints Used
- `GET torrents/check` - Check if torrent is cached
- `POST torrents/add` - Add magnet link
- `POST torrents/download` - Get download link for file

### Key Implementation Features
1. **Cache Checking**: Uses `torrents/check` endpoint for cache validation
2. **Hash Extraction**: Extracts torrent hash from magnet links using regex
3. **File Selection**: Uses `$path` parameter to select specific files
4. **Direct Links**: Returns direct download links (no unrestriction needed)
5. **Authentication**: Uses Bearer token in Authorization header

### DebridLink Workflow
1. Extract hash from magnet link
2. Check if torrent is cached using `torrents/check`
3. If cached: Return files directly from cache
4. If not cached: User must manually call `addMagnet()` first
5. Get download links using `torrents/download` endpoint

### Error Handling
- Invalid magnet links throw `DebridException`
- Missing tokens throw `InvalidArgumentException`
- API errors throw `DebridException` with `error` message
- JSON parsing errors throw `JsonException`
- HTTP errors throw `DebridException`

### DebridLink Mock Requirements
- Mock `GET torrents/check` for cache checking
- Mock `POST torrents/add` for adding magnets
- Mock `POST torrents/download` for getting download links

## Testing Requirements

### Unit Testing
- Use PHPUnit for testing framework
- Use Mockery for HTTP client mocking
- Test all public methods in `ClientStrategy`
- Mock API responses for different scenarios
- Test error conditions and edge cases

### Test Structure
- Test constructor with/without token
- Test token setting and validation
- Test successful operations
- Test error conditions (API errors, invalid JSON, etc.)
- Test duplicate prevention functionality
- Test file path matching and selection

### Mock Requirements
- Mock `GET torrents` for duplicate prevention
- Mock `POST torrents/addMagnet` for adding magnets
- Mock `GET torrents/info/{id}` for torrent information
- Mock `POST torrents/selectFiles/{id}` for file selection
- Mock `POST unrestrict/link` for link unrestriction

### AllDebrid Mock Requirements
- Mock `GET magnet/status` for duplicate prevention and status checking
- Mock `POST magnet/upload` for uploading magnets
- Mock `GET magnet/links` for getting files and download links

## Development Guidelines

### Code Style
- Follow PSR-12 coding standards
- Use type hints for all parameters and return types
- Add comprehensive PHPDoc comments
- Use meaningful variable and method names

### Error Handling
- Always validate inputs (tokens, magnet links, file paths)
- Provide clear error messages
- Use appropriate exception types
- Handle API failures gracefully

### Performance Considerations
- Implement duplicate prevention to avoid re-adding torrents
- Cache torrent information when possible
- Minimize API calls by reusing existing torrents
- Handle empty responses gracefully

### Security
- Never log or expose API tokens
- Validate all inputs before API calls
- Handle API errors without exposing sensitive information

## Common Issues and Solutions

### Real-Debrid Specific
1. **Torrent Status**: Accept `waiting_files_selection` as ready state
2. **File Paths**: Real-Debrid returns paths with leading slash (e.g., `/file.mp4`)
3. **Link Unrestriction**: Always call `unrestrict/link` to get final download URL
4. **Empty Responses**: Handle empty responses from `torrents/selectFiles`
5. **Hash Matching**: Use case-insensitive hash comparison

### AllDebrid Specific
1. **Magnet Status**: Accept `Ready` as ready state
2. **File Paths**: AllDebrid returns filenames without leading slash (e.g., `file.mp4`)
3. **Direct Links**: No unrestriction needed, links are direct download URLs
4. **API Response Format**: Uses `status` and `data` structure with error codes
5. **Rate Limiting**: 12 requests/second, 600 requests/minute

### TorBox Specific
1. **API Response Format**: Uses `success` boolean and `data` structure with `detail` for errors
2. **Cache Checking**: Has proper `torrents/checkcached` endpoint (unlike Real-Debrid)
3. **File Paths**: Returns paths with leading slash (e.g., `/file.mp4`)
4. **Direct Links**: No unrestriction needed, links are direct download URLs
5. **Status Handling**: Accepts both `downloaded` and `ready` as ready states
6. **Hash Format**: Uses lowercase hash extraction from magnet links
7. **Error Handling**: Returns `success: false` with `detail` message for API errors

### DebridLink Specific
1. **API Response Format**: Uses `data` structure with `error` field for API errors
2. **Cache Checking**: Uses `torrents/check` endpoint for cache validation
3. **File Paths**: Returns paths with leading slash (e.g., `/file.mp4`)
4. **Direct Links**: No unrestriction needed, links are direct download URLs
5. **API Endpoints**: Uses `torrents/add`, `torrents/check`, `torrents/download`
6. **Authentication**: Uses Bearer token in Authorization header
7. **Error Handling**: Returns `error` field in response for API errors

### Premiumize Specific
1. **Cache Checking**: Uses `cache/check` endpoint with boolean response
2. **File Retrieval**: Uses `transfer/directdl` endpoint for file list
3. **File Paths**: Returns paths with leading slash (e.g., `/file.mp4`)
4. **Direct Links**: No unrestriction needed, links are direct download URLs
5. **API Response Format**: Uses `status` and `message` structure for errors

## Critical Implementation Rules

### getCachedFiles and getLink Behavior
**IMPORTANT**: Only Real-Debrid should automatically add magnets in `getCachedFiles` and `getLink` methods. This is because Real-Debrid removed their cache checking endpoint.

**Correct Behavior:**
- **Real-Debrid**: Automatically adds magnet if not cached (exception due to missing cache endpoint)
- **All Other Providers**: Only check cache, do NOT add magnets automatically
  - `getCachedFiles()`: Returns empty array if not cached
  - `getLink()`: Throws exception if torrent not cached

**Proper Usage Pattern:**
```php
// Check if cached first
$files = $client->getCachedFiles($magnet);
if (empty($files)) {
    // Add magnet manually
    $torrentId = $client->addMagnet($magnet);
    // Wait for completion, then check again
    $files = $client->getCachedFiles($magnet);
}
```

### Testing Requirements
1. **Mock Cache Checking**: Always mock the cache checking calls first
2. **Error Scenarios**: Test both cached and uncached torrent scenarios
3. **Exception Testing**: Test exact exception messages for uncached torrents
4. **API Error Handling**: Test `success: false` responses for API errors
5. **Hash Extraction**: Test invalid magnet link handling

### Testing Issues
1. **Invalid Magnet Links**: Use proper magnet format in tests
2. **Mock Ordering**: Ensure mocks are set up in correct order
3. **API Response Format**: Match exact API response structure
4. **Exception Messages**: Test exact exception message content

## Future Enhancements
- Add support for more debrid providers
- Implement caching layer for better performance
- Add rate limiting to respect API limits
- Support for batch operations
- Add logging and monitoring capabilities

## Dependencies
- PHP 8.0+
- GuzzleHttp for HTTP requests
- PHPUnit for testing
- Mockery for test mocking

## File Structure
```
src/
├── Client.php                 # Main client facade
├── Clients/
│   ├── ClientStrategy.php     # Interface for all clients
│   ├── RealDebridClient.php   # Real-Debrid implementation
│   ├── AllDebridClient.php    # AllDebrid implementation
│   ├── PremiumizeClient.php   # Premiumize implementation
│   ├── TorBoxClient.php       # TorBox implementation
│   └── DebridLinkClient.php   # DebridLink implementation
└── Exceptions/
    └── DebridException.php    # Custom exception class

tests/
└── Unit/
    └── Clients/
        ├── RealDebridClientTest.php
        ├── AllDebridClientTest.php
        ├── PremiumizeClientTest.php
        ├── TorBoxClientTest.php
        └── DebridLinkClientTest.php
```

This rules file should help any AI assistant quickly understand the project requirements and implementation details when starting a new session.

## Quick Start Guide for New Sessions

### When Starting a New Chat:
1. **Read this file first** - It contains all essential project knowledge
2. **Check current implementation status** - See which clients are implemented
3. **Follow established patterns** - Use existing clients as templates
4. **Maintain consistency** - Follow the same error handling, testing, and code style

### Key Implementation Patterns:
- **Constructor**: `__construct(?string $token, ?ClientInterface $http = null)`
- **Request Method**: Private method that handles HTTP requests with proper error handling
- **Hash Extraction**: `extractHashFromMagnet()` for duplicate prevention
- **Status Checking**: Always check if torrent/magnet is ready before proceeding
- **File Path Handling**: Be aware of provider-specific path formats

### Common Gotchas:
- **Real-Debrid**: Requires unrestriction step, paths have leading slash
- **AllDebrid**: Direct links, no unrestriction, paths without leading slash
- **Testing**: Always mock the duplicate prevention calls (GET torrents/magnet/status)
- **Interface Compliance**: Constructor must match `ClientStrategy` interface exactly

### Development Workflow:
1. Implement the client following existing patterns
2. Create comprehensive unit tests
3. Add to main Client facade
4. Update this rules file with new implementation details
5. Test with real API if possible

### API Documentation Links:
- Real-Debrid: https://api.real-debrid.com/
- AllDebrid: https://docs.alldebrid.com/
- Premiumize: https://app.swaggerhub.com/apis-docs/premiumize.me/api/1.7.2
- TorBox: https://www.postman.com/wamy-dev/torbox/folder/zg0dc69/torrents
- DebridLink: https://debrid-link.com/api_doc/v2/introduction
- EasyDebrid: https://easydebrid.com/apidoc/index.html
- Offcloud: https://github.com/offcloud/offcloud-api
- PutIO: https://app.swaggerhub.com/apis-docs/putio/putio/2.8.14
